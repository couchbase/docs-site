{
  "openapi": "3.0.3",
  "note": "This file created with `redocly bundle ~/couchbase/sync_gateway/docs/api/admin.yaml --dereferenced --ext json -o bundled-admin.json` and then edited to just the relevant schema for use in docs-site example",
  "info": {
    "title": "Sync Gateway",
    "description": "Sync Gateway manages access and synchronization between Couchbase Lite and Couchbase Server",
    "version": "3.1.0",
    "license": {
      "name": "Business Source License 1.1 (BSL)",
      "url": "https://github.com/couchbase/sync_gateway/blob/master/LICENSE"
    }
  },
  "components": {
    "schemas": {
      "Database": {
        "description": "The properties of a database configuration.",
        "type": "object",
        "properties": {
          "server": {
            "description": "This is the Couchbase Server address or addresses that the database connect to. ",
            "type": "string"
          },
          "pool": {
            "description": "This field is unsupported and ignored.",
            "type": "string",
            "default": "default",
            "deprecated": true
          },
          "bucket": {
            "description": "The Couchbase Server backing bucket for the database.",
            "type": "string",
            "default": "The database name"
          },
          "username": {
            "description": "The username for authenticating to the server.",
            "type": "string"
          },
          "password": {
            "description": "The password for authenticating to the server.",
            "type": "string"
          },
          "certpath": {
            "description": "The cert path (public key) for X.509 bucket auth.",
            "type": "string"
          },
          "keypath": {
            "description": "The key path (private key) for X.509 bucket auth",
            "type": "string"
          },
          "cacertpath": {
            "description": "The root CA cert path for X.509 bucket authentication.",
            "type": "string"
          },
          "kv_tls_port": {
            "description": "The Memcached TLS port.",
            "type": "integer",
            "default": 11207
          },
          "max_concurrent_query_ops": {
            "description": "The maximum amount of query operations that can be running at any one point.",
            "type": "integer",
            "default": 1000
          },
          "scopes": {
            "description": "Scope and collection specific config.",
            "type": "object",
            "properties": {
              "additionalProperties": {
                "description": "A map of all the collections with their corresponding configs for this scope",
                "type": "object",
                "additionalProperties": {
                  "description": "The configuration for the individual collection",
                  "type": "object",
                  "properties": {
                    "sync": {
                      "description": "The Javascript function that newly created documents in this collection are ran through.",
                      "type": "string",
                      "example": "function(doc){channel(doc.channels);}"
                    },
                    "import_filter": {
                      "description": "This is the function that all imported documents in this collection are ran through in order to filter out what to import and what not to import. This allows you to control what is made available to Couchbase Mobile clients. If it is not set, then no documents are filtered when imported.\n\n`import_docs` in the database config must be true to make this field applicable.",
                      "type": "string",
                      "example": "function(doc) { if (doc.type != 'mobile') { return false; } return true; }"
                    }
                  },
                  "title": "Collection config"
                },
                "title": "Scopes"
              }
            }
          },
          "name": {
            "description": "The name of the database.",
            "type": "string"
          },
          "sync": {
            "description": "The Javascript function that newly created documents are ran through for the _default scope and collection.",
            "type": "string",
            "default": "function(doc){channel(doc.channels);}"
          },
          "users": {
            "additionalProperties": {
              "description": "Properties associated with a user",
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the user.\n\nUser names can only have alphanumeric ASCII characters and underscores.",
                  "type": "string"
                },
                "password": {
                  "description": "The password of the user.\n\nMandatory. unless `allow_empty_password` is `true` in the database configs.",
                  "type": "string"
                },
                "admin_channels": {
                  "description": "A list of channels to explicitly grant to the user for the default collection.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "all_channels": {
                  "description": "All the channels that the user has been granted access to for the default collection.\n\nAccess could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true
                },
                "collection_access": {
                  "description": "A set of access grants by scope and collection.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "An object keyed by scope, containing a set of collections.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "An object keyed by collection name, defines access for the collection.",
                      "type": "object",
                      "properties": {
                        "admin_channels": {
                          "description": "A list of channels to explicitly grant to the user.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "all_channels": {
                          "description": "All the channels that the user has been granted access to.\n\nAccess could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true
                        },
                        "jwt_channels": {
                          "description": "The channels that the user has been granted access to through channels_claim.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true
                        },
                        "jwt_last_updated": {
                          "description": "The last time that the user's JWT roles/channels were updated.",
                          "type": "string",
                          "format": "date-time",
                          "readOnly": true
                        }
                      }
                    }
                  }
                },
                "email": {
                  "description": "The email address of the user.",
                  "type": "string"
                },
                "disabled": {
                  "description": "If true, the user will not be able to login to the account as it is disabled.",
                  "type": "boolean"
                },
                "admin_roles": {
                  "description": "A list of roles to explicitly grant to the user.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "roles": {
                  "description": "All the roles that the user has been granted access to.\n\nAccess could have been granted through the sync function, roles_claim, or explicitly on the user under the `admin_roles` property.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true
                },
                "jwt_roles": {
                  "description": "The roles that the user has been added to through roles_claim.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true
                },
                "jwt_channels": {
                  "description": "The channels that the user has been granted access to through channels_claim.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true
                },
                "jwt_issuer": {
                  "description": "The issuer of the last JSON Web Token that the user last used to sign in.",
                  "type": "string",
                  "readOnly": true
                },
                "jwt_last_updated": {
                  "description": "The last time that the user's JWT roles/channels were updated.",
                  "type": "string",
                  "format": "date-time",
                  "readOnly": true
                }
              },
              "title": "User"
            }
          },
          "roles": {
            "additionalProperties": {
              "description": "Properties associated with a role",
              "type": "object",
              "properties": {
                "name": {
                  "description": "The name of the role.\n\nRole names can only have alphanumeric ASCII characters and underscores.",
                  "type": "string"
                },
                "admin_channels": {
                  "description": "The channels that users in the role are able to access for the default collection.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "all_channels": {
                  "description": "The channels that the role grants access to for the default collection.\n\nThese channels could have been assigned by the Sync function or using the `admin_channels` property.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "readOnly": true
                },
                "collection_access": {
                  "description": "A set of access grants by scope and collection.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "An object keyed by scope, containing a set of collections.",
                    "type": "object",
                    "additionalProperties": {
                      "description": "An object keyed by collection name, defines access for the collection.",
                      "type": "object",
                      "properties": {
                        "admin_channels": {
                          "description": "A list of channels to explicitly grant to the user.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "all_channels": {
                          "description": "All the channels that the user has been granted access to.\n\nAccess could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true
                        },
                        "jwt_channels": {
                          "description": "The channels that the user has been granted access to through channels_claim.",
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "readOnly": true
                        },
                        "jwt_last_updated": {
                          "description": "The last time that the user's JWT roles/channels were updated.",
                          "type": "string",
                          "format": "date-time",
                          "readOnly": true
                        }
                      }
                    }
                  }
                }
              },
              "title": "Role"
            }
          },
          "revs_limit": {
            "description": "The maximum depth a document's revision tree can grow too.\n\nThe minimum is `20` if conflicts are allowed and 0 if not. It is not recommended to go below `100` when conflicts are allowed.",
            "type": "number",
            "default": "100 if conflict allowed and 50 if not",
            "minimum": 0
          },
          "import_docs": {
            "description": "If true, documents will be imported in to Sync Gateway from the bucket when requested. Documents will be ran through the set `import_filter` if any is set.\n\nThe default value depends on the edition of Sync Gateway being used. If the edition is the community-edition, then this will default to `false` or else in the enterprise-edition, it will default to `true`.\n\nThis can also be set to the string `continuous` which maps to true.",
            "type": "boolean"
          },
          "import_partitions": {
            "description": "** This is an enterprise-edition feature only**\n\nThis is how many import partitions should be used for import sharding.\n\nPartitions are distributed among all Sync Gateway nodes participating in import processing (`import_docs=true`), and each process a subset of the server's vbuckets.\n\nEach partition is processed by an independent function that runs simultaneously to others, so `import_partitions` can be used to tune concurrency based on the number of Sync Gateway nodes, and the number of cores per node.",
            "type": "number",
            "default": 16
          },
          "import_filter": {
            "description": "This is the function that all imported documents in the _default scope and collection are ran through in order to filter out what to import and what not to import. This allows you to control what is made available to Couchbase Mobile clients. If it is not set, then no documents are filtered when imported.\n\n`import_docs` must be true to make this field applicable.",
            "type": "string",
            "example": "function(doc) { if (doc.type != 'mobile') { return false; } return true; }"
          },
          "import_backup_old_rev": {
            "description": "This controls whether import should attempt to create a temporary backup of the previous revision body (if available) when the document is modified in the bucket.",
            "type": "boolean",
            "default": false
          },
          "event_handlers": {
            "description": "These are the settings for webhooks.",
            "type": "object",
            "properties": {
              "max_processes": {
                "description": "The maximum amount of concurrent event handling independent functions that can be running at the same time.",
                "type": "string"
              },
              "wait_for_process": {
                "description": "The maximum amount of time (in milliseconds) to wait when the even queue is full.",
                "type": "string"
              },
              "document_changed": {
                "type": "object",
                "properties": {
                  "handler": {
                    "description": "The handler type.",
                    "type": "string",
                    "enum": [
                      "webhook"
                    ]
                  },
                  "url": {
                    "description": "The URL of the webhook.",
                    "type": "string"
                  },
                  "filter": {
                    "description": "The Javascript function to use to filter the webhook events.",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "The amount of time (in seconds) to attempt connect to the webhook before giving up.",
                    "type": "number"
                  },
                  "options": {
                    "description": "The options for the event.",
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "description": "The option key and value."
                      }
                    }
                  }
                },
                "title": "Event-config"
              },
              "db_state_changed": {
                "type": "object",
                "properties": {
                  "handler": {
                    "description": "The handler type.",
                    "type": "string",
                    "enum": [
                      "webhook"
                    ]
                  },
                  "url": {
                    "description": "The URL of the webhook.",
                    "type": "string"
                  },
                  "filter": {
                    "description": "The Javascript function to use to filter the webhook events.",
                    "type": "string"
                  },
                  "timeout": {
                    "description": "The amount of time (in seconds) to attempt connect to the webhook before giving up.",
                    "type": "number"
                  },
                  "options": {
                    "description": "The options for the event.",
                    "type": "object",
                    "properties": {
                      "additionalProperties": {
                        "description": "The option key and value."
                      }
                    }
                  }
                },
                "title": "Event-config"
              }
            }
          },
          "feed_type": {
            "description": "The type of feed to use to communicate with Couchbase Server.",
            "type": "string",
            "default": "DCP",
            "enum": [
              "TAP",
              "DCP"
            ],
            "deprecated": true
          },
          "allow_empty_password": {
            "description": "This controls whether users that are created can have an empty password or not.",
            "type": "boolean",
            "default": false
          },
          "cache": {
            "type": "object",
            "properties": {
              "rev_cache": {
                "description": "The revision cache config settings.",
                "type": "object",
                "properties": {
                  "size": {
                    "description": "The maximum number of revisions that can be stored in the revision cache.",
                    "type": "string",
                    "default": 5000
                  },
                  "shard_count": {
                    "description": "The number of shards the revision cache should be split into.",
                    "type": "string",
                    "default": 16
                  }
                }
              },
              "channel_cache": {
                "description": "The channel cache config settings.",
                "type": "object",
                "properties": {
                  "max_number": {
                    "description": "The maximum number of channel caches which can exist at any one point.",
                    "type": "integer",
                    "default": 50000
                  },
                  "compact_high_watermark_pct": {
                    "description": "The trigger value for starting the channel cache eviction process.\n\nSpecify this as a percentage which will be the percentage used on `max_number).\n\nWhen the cache size, determined by `max_number`, reaches the high watermark, the eviction process iterates through the cache, removing inactive channels.",
                    "type": "integer",
                    "default": 80
                  },
                  "compact_low_watermark_pct": {
                    "description": "The trigger value for stopping the channel cache eviction process.\n\nSpecify this as a percentage which will be the percentage used on `max_number).\n\nWhen the cache size, determined by `max_number` returns to a value lower than the percentage of it set here, the cache eviction process is stopped.",
                    "type": "integer",
                    "default": 60
                  },
                  "max_wait_pending": {
                    "description": "The maximum time (in milliseconds) for waiting for a pending sequence before skipping it.",
                    "type": "number",
                    "default": 5000
                  },
                  "max_num_pending": {
                    "description": "The maximum number of pending sequences before skipping sequences.",
                    "type": "integer",
                    "default": 10000
                  },
                  "max_wait_skipped": {
                    "description": "The maximum amount of time (in milliseconds) to wait for a skipped sequence before abandoning it.",
                    "type": "number",
                    "default": 3600000
                  },
                  "enable_star_channel": {
                    "description": "Used to control whether Sync Gateway should use the all documents (*) channel.",
                    "type": "boolean",
                    "default": false
                  },
                  "max_length": {
                    "description": "The maximum number of entries to maintain in the cache per channel.",
                    "type": "integer",
                    "default": 500
                  },
                  "min_length": {
                    "description": "The minimum number of entries to maintain in the cache per channel.",
                    "type": "integer",
                    "default": 50
                  },
                  "expiry_seconds": {
                    "description": "The amount of time (in seconds) to keep entries in the cache beyond the minimum retained.",
                    "type": "integer",
                    "default": 60
                  },
                  "query_limit": {
                    "description": "**Deprecated in favour of the database setting `query_pagination_limit`**\n\nThe limit used for channel queries.",
                    "type": "integer",
                    "default": 5000,
                    "deprecated": true
                  }
                }
              },
              "max_wait_pending": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.max_wait_pending` instead**\n\nThe maximum time (in milliseconds) for waiting for a pending sequence before skipping it.",
                "type": "number",
                "deprecated": true
              },
              "max_wait_skipped": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.max_wait_skipped` instead**\n\nThe maximum time (in milliseconds) for waiting for pending sequences before skipping.",
                "type": "number",
                "deprecated": true
              },
              "enable_star_channel": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.enable_star_channel` instead**\n\nUsed to control whether Sync Gateway should use the all documents (*) channel.",
                "type": "boolean",
                "deprecated": true
              },
              "channel_cache_max_length": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.max_length` instead**\n\nThe maximum number of entries maintained in cache per channel.",
                "type": "number",
                "deprecated": true
              },
              "channel_cache_min_length": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.min_length` instead**\n\nThe minimum number of entries maintained in cache per channel.",
                "type": "integer",
                "deprecated": true
              },
              "channel_cache_expiry": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.expiry_seconds` instead**\n\nThe time (seconds) to keep entries in cache beyond the minimum retained.",
                "type": "integer",
                "deprecated": true
              },
              "max_num_pending": {
                "description": "**Deprecated, please use the database setting `cache.channel_cache.max_num_pending` instead**\n\nThe max number of pending sequences before skipping.",
                "type": "integer",
                "deprecated": true
              }
            }
          },
          "rev_cache_size": {
            "description": "**Deprecated, please use the database setting `cache.rev_cache.size` instead**\n\nThe maximum number of revisions to store in the revision cache.",
            "type": "number",
            "deprecated": true
          },
          "offline": {
            "description": "Start the database in an offline state.",
            "type": "boolean",
            "default": false
          },
          "unsupported": {
            "description": "These are unsupported options and therefore it is not recommended to use them.",
            "type": "object",
            "properties": {
              "user_views": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Whether pass-through view query is supported through public API.",
                    "type": "boolean"
                  }
                }
              },
              "oidc_test_provider": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "description": "Whether the `oidc_test_provider` endpoints should be exposed on the public API.",
                    "type": "boolean"
                  }
                }
              },
              "api_endpoints": {
                "type": "object",
                "properties": {
                  "enable_couchbase_bucket_flush": {
                    "description": "**Setting for test purposes only**\n\nWhether Couchbase buckets can be flushed via Admin REST API.",
                    "type": "boolean"
                  }
                }
              },
              "warning_thresholds": {
                "type": "object",
                "properties": {
                  "xattr_size_bytes": {
                    "description": "The number of bytes to be used as a threshold for xattr size limit warnings.",
                    "type": "number"
                  },
                  "channels_per_doc": {
                    "description": "The number of channels per document to be used as a threshold for the channel count warnings.",
                    "type": "number"
                  },
                  "access_and_role_grants_per_doc": {
                    "description": "The number of access and role grants per document to be used as a threshold for grant count warnings.",
                    "type": "number"
                  },
                  "channels_per_user": {
                    "description": "The number of channels per user to be used as a threshold for channel count warnings.",
                    "type": "number"
                  },
                  "channel_name_size": {
                    "description": "The number of channel name characters to be used as a threshold for channel name warnings.",
                    "type": "number"
                  }
                }
              },
              "oidc_tls_skip_verify": {
                "description": "Enable self-signed certificates for OIDC testing.",
                "type": "boolean"
              },
              "sgr_tls_skip_verify": {
                "description": "Enable self-signed certificates for SG-replicate testing.",
                "type": "boolean"
              },
              "remote_config_tls_skip_verify": {
                "description": "Enable self-signed certificates for external JavaScript load.",
                "type": "boolean"
              },
              "guest_read_only": {
                "description": "Restrict GUEST document access to read-only.",
                "type": "boolean"
              },
              "force_api_forbidden_errors": {
                "description": "Force REST API errors to return forbidden",
                "type": "boolean"
              },
              "dcp_read_buffer": {
                "description": "Set the dcp feed to use a different read buffer size.",
                "type": "number"
              },
              "kv_buffer": {
                "description": "Set the kv pool to use a different buffer size.",
                "type": "number"
              }
            }
          },
          "local_jwt": {
            "description": "Configuration for Local JWT authentication.",
            "type": "object",
            "additionalProperties": {
              "description": "The providers name.",
              "type": "object",
              "required": [
                "issuer",
                "client_id",
                "algorithms",
                "keys"
              ],
              "properties": {
                "issuer": {
                  "description": "The value to match against the \"iss\" claim of JWTs.",
                  "type": "string"
                },
                "register": {
                  "description": "If to register a new Sync Gateway user account when a user logs in with a JWT.",
                  "type": "boolean"
                },
                "client_id": {
                  "description": "The value to match against the \"aud\" claim of JWTs. Set to an empty string to disable audience validation.",
                  "type": "string"
                },
                "algorithms": {
                  "description": "The JWT signing algorithms to accept for authentication.",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "keys": {
                  "description": "The JSON Web Keys to use to validate JWTs.",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "kty": {
                        "type": "string",
                        "description": "The cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\"",
                        "enum": [
                          "RSA",
                          "EC"
                        ]
                      },
                      "use": {
                        "type": "string",
                        "description": "The intended use of the public key. Only 'sig' is accepted.",
                        "enum": [
                          "sig"
                        ]
                      },
                      "alg": {
                        "type": "string",
                        "description": "The algorithm intended for use with the key."
                      },
                      "kid": {
                        "type": "string",
                        "description": "The Key ID, used to identify the key to use."
                      },
                      "crv": {
                        "type": "string",
                        "description": "For Elliptic Curve keys, the name of the curve to use.",
                        "enum": [
                          "P-256",
                          "P-384",
                          "P-521"
                        ]
                      },
                      "x": {
                        "type": "string",
                        "description": "For Elliptic Curve keys, the X coordinate of the point, as a base64url string."
                      },
                      "y": {
                        "type": "string",
                        "description": "For Elliptic Curve keys, the Y coordinate of the point, as a base64url string."
                      },
                      "n": {
                        "type": "string",
                        "description": "For RSA keys, the modulus value of the key, as a Base64urlUInt-encoded value."
                      },
                      "e": {
                        "type": "string",
                        "description": "For RSA keys, the exponent of the public key, as a Base64urlUInt-encoded value."
                      }
                    }
                  }
                },
                "disable_session": {
                  "description": "Disable Sync Gateway session creation on successful JWT authentication.",
                  "type": "boolean"
                },
                "user_prefix": {
                  "description": "This is the username prefix for all users created through this provider.",
                  "type": "string"
                },
                "username_claim": {
                  "description": "Allows a different OpenID Connect field to be specified instead of the Subject (`sub`).\n\nThe field name to use can be specified here.",
                  "type": "string"
                },
                "roles_claim": {
                  "description": "If set, the value(s) of the given JSON Web Token claim will be added to the user's roles.\n\nThe value of this claim must be either a string or an array of strings, any other type will result in an error.",
                  "type": "string"
                },
                "channels_claim": {
                  "description": "If set, the value(s) of the given JSON Web Token claim will be added to the user's channels.\n\nThe value of this claim must be either a string or an array of strings, any other type will result in an error.",
                  "type": "string"
                }
              }
            }
          },
          "oidc": {
            "description": "Configuration for OpenID Connect authentication.",
            "type": "object",
            "properties": {
              "providers": {
                "description": "List of OpenID Connect issuers.",
                "type": "object",
                "additionalProperties": {
                  "description": "The providers name.",
                  "type": "object",
                  "properties": {
                    "issuer": {
                      "description": "The URL for the OpenID Connect issuer.",
                      "type": "string"
                    },
                    "register": {
                      "description": "If to register a new Sync Gateway user account when a user logs in with OpenID Connect.",
                      "type": "boolean"
                    },
                    "client_id": {
                      "description": "The OpenID Connect provider client ID.",
                      "type": "string"
                    },
                    "validation_key": {
                      "description": "The OpenID Connect provider client secret.",
                      "type": "string"
                    },
                    "callback_url": {
                      "description": "The URL that the OpenID Connect will redirect to after authentication.\n\nIf not provided, a callback URL will be generated.",
                      "type": "string"
                    },
                    "disable_session": {
                      "description": "Disable Sync Gateway session creation on successful OpenID Connect authentication.",
                      "type": "boolean"
                    },
                    "scope": {
                      "description": "The scope sent for the OpenID Connect request.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "include_access": {
                      "description": "This is whether the `_oidc_callback` response should include the OpenID Connect access token and associated fields (such as `token_type`, and `expires_in`).",
                      "type": "boolean"
                    },
                    "user_prefix": {
                      "description": "This is the username prefix for all users created through this provider.",
                      "type": "string"
                    },
                    "discovery_url": {
                      "description": "The non-standard discovery endpoint.",
                      "type": "string"
                    },
                    "disable_cfg_validation": {
                      "description": "This bypasses the configuration validation based on the OpenID Connect specifications. This may be required for some OpenID providers that don't strictly adhere to the specifications.",
                      "type": "boolean",
                      "default": false
                    },
                    "disable_callback_state": {
                      "description": "Controls whether to maintain state between the auth request and callback endpoints (`/_oidc` and `/_oidc_callback`).\n\n**This is not recommended as it would cause OpenID Connect authentication to be vulnerable to Cross-Site Request Forgery (CSRF, XSRF).**",
                      "type": "boolean",
                      "default": false
                    },
                    "username_claim": {
                      "description": "Allows a different OpenID Connect field to be specified instead of the Subject (`sub`).\n\nThe field name to use can be specified here.",
                      "type": "string"
                    },
                    "roles_claim": {
                      "description": "If set, the value(s) of the given OpenID Connect authentication token claim will be added to the user's roles.\n\nThe value of this claim must be either a string or an array of strings, any other type will result in an error.",
                      "type": "string"
                    },
                    "channels_claim": {
                      "description": "If set, the value(s) of the given OpenID Connect authentication token claim will be added to the user's channels.\n\nThe value of this claim must be either a string or an array of strings, any other type will result in an error.",
                      "type": "string"
                    },
                    "allow_unsigned_provider_tokens": {
                      "description": "Allows users accept unsigned tokens from providers.",
                      "type": "boolean"
                    },
                    "IsDefault": {
                      "description": "Indicates if this is the default OpenID Connect provider.",
                      "type": "boolean"
                    },
                    "Name": {
                      "description": "The name of the OpenID Connect Provider.",
                      "type": "string"
                    },
                    "InsecureSkipVerify": {
                      "description": "Determines whether the TLS certificate verification should be disabled for this provider. ",
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              },
              "default_provider": {
                "description": "The default provider to use when the provider is not specified in the client.",
                "type": "string"
              }
            }
          },
          "old_rev_expiry_seconds": {
            "description": "The number of seconds before old revisions are removed from the Couchbase Server bucket.",
            "type": "number",
            "default": 300
          },
          "view_query_timeout_secs": {
            "description": "The number of seconds before a view query should timeout.",
            "type": "integer",
            "default": 75
          },
          "local_doc_expiry_secs": {
            "description": "The number of seconds before a `_local` document should expire.",
            "type": "integer",
            "default": 7776000
          },
          "enable_shared_bucket_access": {
            "description": "Whether to use extended attributes to store Sync Gateway document (`_sync`) metadata.",
            "type": "boolean",
            "default": true
          },
          "session_cookie_secure": {
            "description": "Override the session cookie `secure` flag. If set, the cookie will have the `secure` flag.\n\nThis will default to `true` if startup config `api.https.tls_cert_path` is set otherwise it will default to `false`.",
            "type": "boolean"
          },
          "session_cookie_name": {
            "description": "This can be used to define a custom per-database session cookie name.",
            "type": "string"
          },
          "session_cookie_http_only": {
            "description": "Make all session cookies for the database set the `HttpOnly` flag so they are inaccessible to JavaScript.",
            "type": "boolean",
            "default": false
          },
          "allow_conflicts": {
            "description": "This controls whether to allow conflicting document revisions.",
            "type": "boolean",
            "default": true,
            "deprecated": true
          },
          "num_index_replicas": {
            "description": "This is the number of Global Secondary Indexes (GSI) to use for core indexes.",
            "type": "number",
            "default": 1
          },
          "use_views": {
            "description": "Force the use of views instead of GSI.",
            "type": "boolean",
            "default": false
          },
          "send_www_authentice_header": {
            "description": "Controls whether to send a `WWW-Authenticate` header in `401 Unauthorized` HTTP responses.",
            "type": "boolean",
            "default": true
          },
          "disable_password_auth": {
            "description": "Whether to disable username/password authentication and only allow OIDC and guest access.",
            "type": "boolean",
            "default": false
          },
          "bucket_op_timeout_ms": {
            "description": "This is the amount of milliseconds should pass before a bucket operation times out. An error will be returned if the bucket operation times out saying: `operation timed out`.",
            "type": "number"
          },
          "slow_query_warning_threshold": {
            "description": "The amount of milliseconds a N1QL query should run before logging a warning. ",
            "type": "number",
            "default": 500
          },
          "delta_sync": {
            "description": "Delta sync configuration settings.\n\n**This is an enterprise-edition feature only**",
            "type": "object",
            "properties": {
              "enabled": {
                "description": "Whether delta sync is enabled.\n\n**This is an enterprise-edition feature only**",
                "type": "boolean",
                "default": false
              },
              "rev_max_age_seconds": {
                "description": "The number of seconds deltas for old revisions are available for.\n\nThis defaults to 24 hours (in seconds).",
                "type": "number",
                "default": 86400
              }
            }
          },
          "compact_interval_days": {
            "description": "The interval between scheduled tombstone compaction runs (in days). This can be a floating point number.\n\nIf set to 0, compaction will not run automatically.",
            "type": "number",
            "default": 1
          },
          "sgreplicate_enabled": {
            "description": "Whether the node should accept assign replications (`true`) or not (`false`).",
            "type": "boolean",
            "default": true
          },
          "sgreplicate_websocket_heartbeat_secs": {
            "description": "Use a custom heartbeat interval (in seconds) for websocket ping frames.",
            "type": "integer",
            "default": 300
          },
          "replications": {
            "type": "object",
            "properties": {
              "replication_id": {
                "description": "Properties of a replication",
                "type": "object",
                "properties": {
                  "replication_id": {
                    "description": "This is the ID of the replication.\n\nWhen creating a new replication using a POST request, this will be set to a random UUID if not explicitly set.\n\nWhen the replication ID is specified in the URL, this must be set to the same replication ID if specifying it at all.",
                    "type": "string"
                  },
                  "remote": {
                    "description": "This is the endpoint of the database for the remote Sync Gateway that is the subject of this replication's `push`, `pull`, or `pushAndPull` action.\n\nTypically this would include the URI, port, and database name. For example, `http://localhost:4985/db`.\n\nHow this remote is used depends on the `direction` of the replication:\n* `pull` - this replicator _pulls_ changes from the `remote`\n* `push` - this replicator _pushes_ changes to this `remote`\n* `pushAndPull` - this replicator _pushes_ changes to this `remote`, while also pulling receiving changes",
                    "type": "string"
                  },
                  "username": {
                    "description": "**This has been deprecated in favour of `remote_username`.**\n\nThis is the username to use to authenticate with the remote.\n\nThis can only be used for a pull replication.",
                    "type": "string",
                    "deprecated": true
                  },
                  "password": {
                    "description": "**This has been deprecated in favour of `remote_password`.**\n\nThis is the password to use to authenticate with the remote.\n\nThis password will be redacted in the replication config.\n\nThis can only be used for a pull replication.",
                    "type": "string",
                    "deprecated": true
                  },
                  "remote_username": {
                    "description": "The username to use to authenticate with the remote.\n\nThis can only be used for a pull replication.",
                    "type": "string"
                  },
                  "remote_password": {
                    "description": "The password to use to authenticate with the remote.\n\nThis password will be redacted in the replication config.\n\nThis can only be used for a pull replication.",
                    "type": "string"
                  },
                  "direction": {
                    "description": "This specifies which direction the replication will be replicating with the `remote` replicator.\n\nThe directions are:\n* `pull` - changes are pulled from the remote database\n* `push` - changes are pushed to the remote database\n* `pushAndPull` - changes are both push-to and pulled-from the remote database\n\nReplications created prior to Sync Gateway 2.8 derive their `direction` from the source/target URL of the replication.",
                    "type": "string",
                    "enum": [
                      "push",
                      "pull",
                      "pushAndPull"
                    ]
                  },
                  "conflict_resolution_type": {
                    "description": "This defines what conflict resolution policy Sync Gateway should use to apply when resolving conflicting revisions.\n\nChanging this is an enterprise-edition only feature.\n\n**Behaviour**\n* *default* - In priority order, this will cause\n  - Deletes to always win (the delete with the logest revision history wins if both revisions are deletes)\n  - The revision with the longest revision history to win. This means the the revision with the most changes and therefore the highest revision ID will win.\n* *localWins* - This will result in local revisions always being the winner in any conflict.\n* *remoteWins* - This will result in remote revisions always being the winner in any conflict.\n* *custom* - This will result in conflicts going through your own custom conflict resolver. You must provide this logic as a Javascript function in the `custom_conflict_resolver` parameter. This is an enterprise-edition only feature.\n\n\nNote: replications created prior to Sync Gateway 2.8 will default to `default`.",
                    "type": "string",
                    "default": "default",
                    "enum": [
                      "default",
                      "remoteWins",
                      "localWins",
                      "custom"
                    ]
                  },
                  "custom_conflict_resolver": {
                    "description": "This specifies the Javascript function to use to resolve conflicts between conflicting revisions.\n \nThis **must** be used when `conflict_resolution_type=custom`. This property will be ignored when `conflict_resolution_type` is not `custom`.\n\nThe Javascript function to provide this property should be in backticks (like the sync function). The function takes 1 parameter which is a struct that represents the conflict. This struct has 2 properties:\n* `LocalDocument` - The local document. This contains the document ID under the `_id` key.\n* `RemoteDocument` - The remote document\nThe function should return the new documents body. This can be the winning revision (for example, `return conflict.LocalDocument`), a new body, or `nil` to resolve as a delete.\n\nExample:\n```\n\"custom_conflict_resolver\":\\`\n\tfunction(conflict) {\n\t\tconsole.log(\"Doc ID: \"+conflict.LocalDocument._id);\n\t\tconsole.log(\"Full remote doc: \"+JSON.stringify(conflict.RemoteDocument));\n\t\treturn conflict.RemoteDocument;\n\t}\n\\`\n```\n\nUsing complex `custom_conflict_resolver` functions can noticeably degrade performance. Use a built-in resolver whenever possible.\n\nThis is an enterprise-edition only feature.\n",
                    "type": "string",
                    "default": "none"
                  },
                  "purge_on_removal": {
                    "description": "Specifies whether to purge a document if the remote user loses access to all of the channels on the document when attempting to pull it from the remote.\n\nIf false, documents will not be replicated and not be purged when the user loses access.",
                    "type": "boolean",
                    "default": false
                  },
                  "enable_delta_sync": {
                    "description": "This will turn on delta- sync for the replication. This works in conjunction with the database level setting `delta_sync.enabled`\n\nIf set to true, delta-sync will be used as long as both databases involved in the replication have delta-sync enabled. If a database does not have delta-sync enabled, then the replication will run without delta-sync.\n\nReplications created prior to Sync Gateway 2.8 must have delta-sync disabled.\n\nEnabling this is an enterprise-edition only feature.",
                    "type": "boolean",
                    "default": false
                  },
                  "max_backoff_time": {
                    "description": "Specifies the maximum time-period (in minutes) that Sync Gateway will attempt to reconnect to a lost or unreachable remote.\n\nWhen a disconnection happens, Sync Gateway will do an exponential backoff up to this specified value. When this value is met, it will attempt to reconnect indefinitely every `max_backoff_time` minutes.\n\nIf this is set to 0, Sync Gateway will do the normal exponential backoff after the disconnect happens but then attempting 10 minutes and stop the replication.\n\nNote: this defaults to 5 minutes for replications created prior to Sync Gateway 2.8.",
                    "type": "integer",
                    "default": 5
                  },
                  "initial_state": {
                    "description": "This is what state to start the replication in when creating a new replication.\n\nThis allows you to control if the replication starts in a `stopped` start or `running` state.\n\nReplications prior to Sync Gateway 2.8 will run in the default state `running`.",
                    "type": "string",
                    "default": "running",
                    "enum": [
                      "running",
                      "stopped"
                    ]
                  },
                  "continuous": {
                    "description": "If true, changes will be immediately synced when they happen. This is known as a continuous replication.\n\nIf false, all changes will be synced until they have been processed. The replication will then cease and not process any future changes (unless started again by the user). This is known as a one-shot replication.",
                    "type": "boolean",
                    "default": false
                  },
                  "filter": {
                    "description": "This defines whether to filter documents by their channels or not.\n\nIf set to `sync_gateway/bychannel` then a **pull** replication will be limited to a specific set of channels specified by the `query_params.channels` property.\n\nThis only can be used with pull replications.",
                    "type": "string",
                    "enum": [
                      "sync_gateway/bychannel"
                    ]
                  },
                  "query_params": {
                    "description": "This is a set of key/value pairs used in the query string of the replication.\n\nIf `filters=sync_gateway/bychannel` then this can be used to set the channels to filter by in a pull replication. To do this, set the `channels` key to a string array of the channels to filter by. For example:\n```\n\"filter\":\"sync_gateway/bychannel\",\n\"query_params\": {\n  \"channels\":[\"chanUser1\"]\n},\n```",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "adhoc": {
                    "description": "Set to true to run the replication as an adhoc replication instead of a persistent one.\n\nThis means that the replication will only last the period of the replication until the status is changed to `stopped` and then it will be removed automatically. It will also be removed if Sync Gateway restarts or if removed due to user action.",
                    "type": "boolean",
                    "default": false
                  },
                  "batch_size": {
                    "description": "The amount of changes to be sent in one batch of replications. Changing this is an enterprise-edition only feature.",
                    "type": "integer",
                    "default": 200
                  },
                  "run_as": {
                    "description": "This is used if you want to specify a user to run the replication as. This means that the replication will only be able to replicate what the user  access to what the user has access to.",
                    "type": "string"
                  },
                  "collections_enabled": {
                    "description": "If true, the replicator will run with collections, and will replicate all collections, unless otherwise limited by `keyspace_map`.\n\nIf false, the replicator will only replicate the default collection.",
                    "type": "boolean",
                    "default": false
                  },
                  "collections_local": {
                    "description": "Limits the set of collections replicated to those listed in this array.\n\nThe replication will use all collections defined on the database if this list is empty.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "scope1.collection1",
                      "scope1.collection3",
                      "scope1.collection6"
                    ],
                    "default": []
                  },
                  "collections_remote": {
                    "description": "Remaps the local collection name to the one specified in this array when replicating with the remote.\n\nIf only a subset of collections need remapping, elements in this array can be specified as `null` to preserve the local collection name.\n\nThe same index is used for both `collections_remote` and `collections_local`, and both arrays must be the same length.",
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "example": [
                      "scope1.collectionA",
                      null,
                      "scope1.collectionF"
                    ],
                    "default": []
                  }
                },
                "required": [
                  "direction"
                ],
                "title": "User configurable replication properties"
              }
            }
          },
          "serve_insecure_attachment_types": {
            "description": "If set, always serve attachments with the `Content-Type` header set to the type of the attachment.\n\nWhen serving an attachment, usually the `Content-Type` header is set to the type of the attachment but the `Content-Disposition` response header will be set instead if the content type is vulnerable to a phishing attack, causing the browser to download the file instead of display it. This option will override that behaviour and always set the `Content-Type` header.\n",
            "type": "boolean",
            "default": false
          },
          "query_pagination_limit": {
            "description": "The query limit to be used during pagination of large queries.",
            "type": "integer",
            "default": 5000
          },
          "user_xattr_key": {
            "description": "The key to use for the user xattr that will be accessible from the sync function. IF empty, the feature will be disabled.",
            "type": "string"
          },
          "client_partition_window_secs": {
            "description": "How long (in seconds) clients can remain offline for without losing replication metadata.\n\nDefaults to 30 days (in seconds)",
            "type": "integer",
            "default": 2592000
          },
          "guest": {
            "description": "Properties associated with a user",
            "type": "object",
            "properties": {
              "name": {
                "description": "The name of the user.\n\nUser names can only have alphanumeric ASCII characters and underscores.",
                "type": "string"
              },
              "password": {
                "description": "The password of the user.\n\nMandatory. unless `allow_empty_password` is `true` in the database configs.",
                "type": "string"
              },
              "admin_channels": {
                "description": "A list of channels to explicitly grant to the user for the default collection.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "all_channels": {
                "description": "All the channels that the user has been granted access to for the default collection.\n\nAccess could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "collection_access": {
                "description": "A set of access grants by scope and collection.",
                "type": "object",
                "additionalProperties": {
                  "description": "An object keyed by scope, containing a set of collections.",
                  "type": "object",
                  "additionalProperties": {
                    "description": "An object keyed by collection name, defines access for the collection.",
                    "type": "object",
                    "properties": {
                      "admin_channels": {
                        "description": "A list of channels to explicitly grant to the user.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "all_channels": {
                        "description": "All the channels that the user has been granted access to.\n\nAccess could have been granted through the sync function, roles, or explicitly on the user under the `admin_channels` property.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true
                      },
                      "jwt_channels": {
                        "description": "The channels that the user has been granted access to through channels_claim.",
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "readOnly": true
                      },
                      "jwt_last_updated": {
                        "description": "The last time that the user's JWT roles/channels were updated.",
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                      }
                    }
                  }
                }
              },
              "email": {
                "description": "The email address of the user.",
                "type": "string"
              },
              "disabled": {
                "description": "If true, the user will not be able to login to the account as it is disabled.",
                "type": "boolean"
              },
              "admin_roles": {
                "description": "A list of roles to explicitly grant to the user.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "roles": {
                "description": "All the roles that the user has been granted access to.\n\nAccess could have been granted through the sync function, roles_claim, or explicitly on the user under the `admin_roles` property.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "jwt_roles": {
                "description": "The roles that the user has been added to through roles_claim.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "jwt_channels": {
                "description": "The channels that the user has been granted access to through channels_claim.",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "readOnly": true
              },
              "jwt_issuer": {
                "description": "The issuer of the last JSON Web Token that the user last used to sign in.",
                "type": "string",
                "readOnly": true
              },
              "jwt_last_updated": {
                "description": "The last time that the user's JWT roles/channels were updated.",
                "type": "string",
                "format": "date-time",
                "readOnly": true
              }
            },
            "title": "User"
          },
          "javascript_timeout_secs": {
            "description": "The maximum number of seconds the sync, import filter, and custom conflict resolver JavaScript functions are allowed to run for before timing out. Set to 0 to allow the JS functions to run uncapped.",
            "type": "number",
            "default": 60
          },
          "suspendable": {
            "description": "Set to true to allow the database to be suspended. \n\nDefaults to true when running in serverless mode otherwise defaults to false.",
            "type": "boolean",
            "default": false
          }
        },
        "title": "Database-config"
      }
    }
  }
}
