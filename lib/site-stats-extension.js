'use strict'

module.exports.register = function () {
  this.once('sitePublished', ({ contentCatalog, siteCatalog, uiCatalog }) => {
    const files = [contentCatalog, siteCatalog, uiCatalog]
      .reduce((accum, catalog) => accum.concat(catalog.getFiles().filter(({ out }) => out)), [])
    printReport(collectStats(files))
  })
}

function collectStats (files) {
  let pages = 0
  let images = {}
  let attachments = 0
  let aliases = 0
  let aux = 0
  let ui = 0
  let size = 0
  files.forEach((file) => {
    const { out, stat, src = {} } = file
    if (stat) size += stat.size // not set for aliases and some generated files
    if (out.path.startsWith('_/')) src.family = 'ui'
    switch (src.family) {
      case 'page':
        pages++
        break
      case 'image':
        if (!file.path) file.path = out.path // images generated by Asciidoctor Kroki
        const extname = file.extname.toLowerCase()
        images[extname] = (images[extname] || 0) + 1
        break
      case 'attachment':
        attachments++
        break
      case 'alias':
        aliases++
        break
      case 'ui':
        ui++
        break
      default:
        aux++
    }
  })
  return { files: files.length, pages, aliases, images, attachments, ui, aux, size }
}

function printReport (stats) {
  const totalImages = Object.values(stats.images).reduce((a, b) => a + b, 0)
  const imageDist = Object.entries(stats.images).sort((a, b) => b[1] - a[1] )
    .map(([ext, cnt]) => `${Math.round((cnt / totalImages) * 10000) / 100}% ${ext.substr(1)}` )
  console.log('Site Stats')
  console.log('----------')
  console.log('Files: ' + stats.files)
  console.log('Size: ' + toHumanReadableSize(stats.size))
  console.log('Pages: ' + stats.pages)
  console.log('Aliases: ' + stats.aliases)
  console.log('Images: ' + totalImages + (totalImages > 0 ? ' (' + imageDist.join(', ') + ')' : ''))
  console.log('Attachments: ' + stats.attachments)
  console.log('UI: ' + stats.ui)
  console.log('Meta: ' + stats.aux)
}

function toHumanReadableSize (size) {
  const base = 1024
  const units = ['B', 'K', 'M', 'G', 'T']
  const exp = parseInt(Math.log(size) / Math.log(base))
  const ssize = size / Math.pow(base, exp)
  return `${Math.round(ssize * 100) / 100}${units[exp]}`
}
