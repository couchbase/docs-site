#!/bin/bash
PREVIEW_VERSION="1.1.0"

set -eo pipefail
echo "üêá Hello! I'm the Docs Build Rabbit"
echo "version $PREVIEW_VERSION"
echo

help() {
    cat <<HELP | less
NAME

    preview - a script to quickly preview docs work


SET UP

Update your docs-site repo, and install the script.

    cd docs-site/
    git checkout master
    git pull

    scripts/preview --init

You will also want to install 'gh' and log in.

    brew install gh
    gh auth login  # follow the instructions

Now, from a content repo (under antora.yml) you can build locally:

    preview

Or remotely:

    preview --remote

The latter will show you the URL to find the workflow:

    https://github.com/couchbase/docs-infra/actions/workflows/preview-deploy.yml


UPDATING

To update the preview script, if your script is recent enough, simply run:

    preview --update

Otherwise, you can update the script manually.

    cd docs-site          # navigate to your docs-site repo
    git checkout master   # ensure you are on the master branch

    git pull
    scripts/preview --init

    
TROUBLESHOOTING

If you run into issues, you can run the script in debug mode.

    preview --debug

These files should be sent to the docs team:

    preview/debug.log
    preview/doctor/tree.html
    preview/doctor/antora-playbook.js

The automated email will only work on MacOS.
If you are on Linux, then just send those files manually.


DOCUMENTATION

See https://confluence.issues.couchbase.com/wiki/spaces/DOCS/pages/2660597775/preview+script

HELP
}

POSITIONAL_ARGS=()
REMOTE=""
INIT=""
PREVIEW_CONFIG=""
DEBUG=""
UPDATE=""

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      help
      exit 0
      ;;
    -v|--version)
      # no-op, we have already printed the version
      exit 0
      ;;
    -r|--remote)
      REMOTE="true"
      shift # past argument
      ;;
    --init)
      INIT=true
      shift
      ;;
    -c|--config)
      shift
      PREVIEW_CONFIG=$1
      shift
      ;;
    -u|--update)
      UPDATE=true
      shift
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

if [ -n "$UPDATE" ]; then
    DOCS_SITE=$(realpath $0/../..)
    cd $DOCS_SITE

    echo "üêá Let's try to update preview, by updating your docs-site checkout"
    git checkout master || ( echo "Failed to checkout master branch"; exit 1 )
    git pull || ( echo "Failed to pull latest changes"; exit 1 )

    echo "üêá Now let's update the preview script"
    INIT=true
fi

if [ -n "$INIT" ]; then
    DOCS_SITE=$(realpath $0/../..)
    cd $DOCS_SITE

    cp -n antora-playbook.preview.local.yml-example antora-playbook.preview.local.yml \
      || echo "antora-playbook.preview.local.yml already exists"

    echo "üêá Checking 'preview' command link (you may need to enter your password)"

    which preview || sudo ln -sf $(realpath $0) /usr/local/bin/preview
    which preview >/dev/null || ( echo "Failed to link preview command"; exit 1 )

    brew install gh jq yq
    gh auth token || gh auth login

    echo "üêá initialised preview script"
    exit 0
fi



# define utility function
upfind () {
    WHAT=$1
    DEPTH=${2:-1}
    if [ "$DEPTH" -ge 5 ]; then
        return
    fi
    ls -d $WHAT 2>/dev/null || upfind ../$WHAT $((++DEPTH))
}

ANTORA=$(upfind antora.yml)
if [ -z "$ANTORA" ]; then
    echo Did not find 'antora.yml'.
    echo Run preview from a content repository under startPath!
    exit 1
fi
ANTORA=$(realpath $(dirname $ANTORA))
TOPLEVEL=$(git rev-parse --show-toplevel)

export PREVIEW_REPO=$(basename $TOPLEVEL)
export PREVIEW_BRANCH=$(git branch --show-current)
export PREVIEW_START_PATH=.${ANTORA#$TOPLEVEL}
export PREVIEW_CONFIG=${PREVIEW_CONFIG:-$PREVIEW_BRANCH}
export PREVIEW_COMPONENT=$(yq .name $ANTORA/antora.yml 2>/dev/null)

if [ -z "$REMOTE" ]; then
    export PREVIEW_OVERRIDE=${PREVIEW_OVERRIDE:-antora-playbook.preview.local.yml}
fi

echo "   Let's build this preview!"
env | grep ^PREVIEW

assert() {
    GOT=$1
    EXPECTED=$2
    WARNING=$3

    if [ "$GOT" != "$EXPECTED" ]; then
        echo
        echo WARNING $WARNING
        echo "Your remote build may not match your local preview."

        read -n 1 -s -r -p "Press any key to continue, or Ctrl+C to exit"
        echo
        echo
    fi
}

if [ -n "$REMOTE" ]; then
    assert "$(git status -s -uno)" '' 'You have uncommitted changes.'
    assert "$(git status -s preview/HEAD.yml preview/${PREVIEW_BRANCH}.yml)" '' 'You have uncommitted changes to the preview/ configuration.'
    assert "$(git push --dry-run 2>&1)" 'Everything up-to-date' 'You have unpushed changes.'
    assert "$PREVIEW_BRANCH" "$PREVIEW_CONFIG" "Remote preview doesn't support custom --config, will be ignored"
    assert "$DEBUG" "" "Remote preview doesn't support --debug, will be ignored"

    PR_BASE_OID=$(gh pr view --json baseRefOid -q .baseRefOid 2>/dev/null) || true
    PR_BASE_NAME=$(gh pr view --json baseRefName -q .baseRefName 2>/dev/null) || true
    PR_NUMBER=$(gh pr view --json number -q .number 2>/dev/null) || true
    PREVIEW_OWNER=$(gh repo view --json owner -q .owner.login) || true

    WORKFLOW=preview-deploy.yml
    UUID=$(uuidgen)

    gh workflow run --repo couchbase/docs-infra $WORKFLOW \
        --field preview_repo=${PREVIEW_REPO} \
        --field preview_branch=${PREVIEW_BRANCH} \
        --field preview_start_path=${PREVIEW_START_PATH} \
        --field preview_override=${PREVIEW_OVERRIDE} \
        --field pr_base_oid=${PR_BASE_OID} \
        --field preview_owner=${PREVIEW_OWNER} \
        --field pr_number=${PR_NUMBER} \
        --field uuid=${UUID} \
        --field preview_component=${PREVIEW_COMPONENT} \
        > /dev/null

    echo Requested the build at Github with UUID $UUID
    echo see https://github.com/couchbase/docs-infra/actions/workflows/preview-deploy.yml
    echo
    echo Visit 'https://preview.docs-test.couchbase.com/builds.html' to see all completed builds
    echo


    for i in {1..10}; do
        echo Polling github...
        URL=$(gh run list \
            --repo couchbase/docs-infra \
            -w $WORKFLOW \
            --json displayTitle,url,databaseId \
            | jq -r \
                --arg UUID $UUID \
                '.[] | select(.displayTitle | test($UUID))| .url' )
        if [ -n "$URL" ]; then
            echo Opening $URL in your web browser
            # or could `gh run watch $databaseId`
            open $URL
            exit 0
        fi

        sleep 3
    done
    echo Timed out. Check Github actions
    exit 1

else
    export PREVIEW_GITHUB_REMOTE=$(git remote get-url origin 2>/dev/null)
    DOCS_SITE=$(realpath $0/../..)
    cd $DOCS_SITE
    echo

    ANTORA="npx antora --extension lib/preview.js antora-playbook.preview.yml --stacktrace --url '$(pwd)/preview'"

    if [ -n "$DEBUG" ]; then
        echo "Running in debug mode"
        $ANTORA --log-format=pretty 2>&1 | tee preview-debug.log
        mv preview-debug.log preview/debug.log

        echo Creating preview debug report...
        osascript scripts/preview-debug.scpt
    else
        $ANTORA
    fi
fi
